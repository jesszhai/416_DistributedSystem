

#ifndef MSG_H
#define MSG_H 1
#include "tworker.h"
#include <stdint.h>
#define HOSTLEN IDLEN
#define h_addr h_addr_list[0]

enum cmdMsgKind {
  BEGINTX = 1000,
	JOINTX,
	NEW_A,
	NEW_B,
	NEW_IDSTR,
	DELAY_RESPONSE,
	CRASH,
	COMMIT,
	COMMIT_CRASH,
	ABORT, 
  ABORT_CRASH, 
	VOTE_ABORT,
  VOTE_COMMIT,

  JOIN_FAIL,
  JOIN_SUCCESS,
  BEGIN_FAIL,
  BEGIN_SUCCESS,
  PREPARE_COMMIT,
  COMMIT_REQ,
  POLL_DECISION,
  RESTARTED
};

enum managerDecision{
  DECIDE_ABORT = 2000,
  DECIDE_COMMIT,
  WAIT
};


// The following is not the best approach/format for the command messages
// but it is simple and it will fit in one packet. Which fields have 
// usable values will depend upon the type of the command message.


typedef struct  {
  uint32_t   msgID;      
  uint32_t   tid;        // Transaction ID
  uint32_t   port;
  int32_t    newValue;   // New value for A or B
  int32_t    delay;
  union {  // string data
    char           newID[IDLEN];
    char           hostName[HOSTLEN];
  } strData;
} msgType;

// message format between worker and transaction manager
typedef struct {
  uint32_t     msgID;
  uint32_t     tid;        // Transaction ID
  unsigned int nodeId;     // worker node ID (command port)
  uint32_t     isCrash;    // flag for special crash messages (ABORT_CRASH and COMMIT_CRASH)
  struct       clock vectorClock[MAX_NODES];
} txMessage;  

// Information to restart worker with the same ports after crash
typedef
struct{
  unsigned long sys_port;               // port generated by the system for communicating with the trans manager*/
  struct sockaddr_in managerAddr;       // transaction manager's address    
  struct clock vectorClock[MAX_NODES];  // worker's current vector clock
} CrashInfo;

// Record format for worker
typedef struct {
  uint32_t        msgID;
  uint32_t        tid;            // Transaction ID
  int32_t         oldValue;       // oldValue for A or B depending on msgID == NEW_A or msgID == NEW_B
  char            oldID[IDLEN];   // oldValue for IDstring
  struct clock    vectorClock[MAX_NODES]; // worker's vector clock at time of tx event
  struct timeval  lastUpdateTime; // last update time of object store
} Record;

typedef struct {
  uint32_t        msgID;          
  uint32_t        tid;           // Transaction ID
  unsigned int    nodeId;        // node of msg sender (worker)
} CoordRecord;

#endif 
